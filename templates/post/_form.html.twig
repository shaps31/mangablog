{# templates/post/_form.html.twig #}
{{ form_start(form) }}

{# Erreurs globales du formulaire #}
{% if form.vars.errors|length %}
    <div class="alert alert-danger mb-3">
        {{ form_errors(form) }}
    </div>
{% endif %}

<div class="row g-3">
    <div class="col-12">
        {{ form_row(form.title, {
            attr: { autofocus: true, placeholder: 'Titre de lâ€™article' }
        }) }}
    </div>

    <div class="col-12">
        {{ form_row(form.slug, {
            help: 'Laisse vide pour Ãªtre auto-gÃ©nÃ©rÃ© depuis le titre.'
        }) }}
    </div>

    <div class="col-12">
        {{ form_row(form.content, { attr: { rows: 10 } }) }}
    </div>

    <div class="col-md-4">
        {{ form_row(form.status) }}
    </div>
    <div class="col-md-4">
        {{ form_row(form.publishedAt) }}
    </div>
    <div class="col-md-4">
        {{ form_row(form.rating) }}
    </div>

    <div class="col-12">
        {# âœ… URL de cover (une seule fois) #}
        {{ form_row(form.cover, {
            help: 'Colle une URL dâ€™image (ex: https://exemple.com/cover.jpg)'
        }) }}

        {# (Optionnel) Upload de fichier â€“ nâ€™affiche que si prÃ©sent dans le FormType #}
        {% if form.coverFile is defined %}
            {{ form_row(form.coverFile, { help: 'Ou uploade une image (4 Mo max)' }) }}
        {% endif %}

        {# ðŸ‘‡ PrÃ©visualisation (unique) ; initialisÃ©e si une URL valide existe #}
        {% set cover = form.cover.vars.value|default('') %}
        {% set valid = cover matches '/^https?:\\/\\//i' %}
        <div class="mt-2">
            <img
                id="coverPreview"
                alt="AperÃ§u de lâ€™image de couverture"
                class="img-thumbnail {{ valid ? '' : 'd-none' }}"
                style="max-height:220px"
                loading="lazy"
                {% if valid %}src="{{ cover }}"{% endif %}
            >
        </div>
    </div>

    <div class="col-md-6">
        {{ form_row(form.category) }}
    </div>
    <div class="col-md-6">
        {{ form_row(form.tags) }}
    </div>
</div>

<button class="btn btn-primary mt-3">
    {{ button_label|default('Enregistrer') }}
</button>

{{ form_end(form) }}

{# Tom Select â€” recherche distante + crÃ©ation Ã  la volÃ©e #}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const el = document.getElementById('post_tags')
            || document.querySelector('select[name="post[tags][]"]');
        if (!el || el.tomselect) return;

        const ts = new TomSelect(el, {
            plugins: ['remove_button'],
            valueField: 'id',
            labelField: 'name',
            searchField: 'name',
            persist: false,
            load: function (query, callback) {
                if (!query.length) return callback();
                fetch('{{ path("admin_tag_search") }}?q=' + encodeURIComponent(query))
                    .then(r => r.json())
                    .then(callback)
                    .catch(() => callback());
            },
            create: true,
            createFilter: (input) => input.trim().length >= 2
        });

        ts.on('item_add', function (value) {
            if (isNaN(Number(value))) {
                fetch('{{ path("admin_tag_create") }}', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({ name: value })
                })
                    .then(r => r.json())
                    .then(tag => {
                        if (!tag || !tag.id) return;
                        ts.updateOption(value, { id: tag.id, name: tag.name });
                        ts.addItem(tag.id, true);
                        ts.removeItem(value);
                    })
                    .catch(() => {});
            }
        });
    });
</script>

{# AperÃ§u dynamique de la cover (URL + fichier local) #}
<script>
    (function () {
        const urlInput = document.getElementById('post_cover');
        const fileInput = document.getElementById('post_coverFile');
        const img = document.getElementById('coverPreview');
        if (!img) return;

        const show = (src) => {
            if (src) {
                img.src = src;
                img.classList.remove('d-none');
            } else {
                img.classList.add('d-none');
                img.removeAttribute('src');
            }
        };

        const isHttpUrl = (u) => /^https?:\/\/.+/i.test(u);

        function updateFromUrl() {
            if (!urlInput) return;
            const url = (urlInput.value || '').trim();
            show(isHttpUrl(url) ? url : '');
        }

        function updateFromFile() {
            if (!fileInput || !fileInput.files || !fileInput.files[0]) return;
            const file = fileInput.files[0];
            if (!file.type.startsWith('image/')) return;
            const reader = new FileReader();
            reader.onload = (e) => show(e.target.result);
            reader.readAsDataURL(file);
        }

        if (urlInput) {
            urlInput.addEventListener('input', updateFromUrl);
            urlInput.addEventListener('change', updateFromUrl);
            updateFromUrl(); // init si Ã©dition
        }

        if (fileInput) {
            fileInput.addEventListener('change', updateFromFile);
        }
    })();
</script>
